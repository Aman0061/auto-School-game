#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏:
–∑–∞–º–µ–Ω—è–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ Image ID –∏–∑ Cloudflare
"""

import json
import urllib.request
import urllib.parse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudflare
ACCOUNT_ID = "dc356eae9b175f6592aacba6e021cb28"
API_TOKEN = "LUJU1UKz9EaukbqW2xKqHaTKb9pYBCAZK2VeUrEU"

def get_all_cloudflare_images():
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudflare –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å"""
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É —Å –±–æ–ª—å—à–∏–º per_page
    url = f"https://api.cloudflare.com/client/v4/accounts/{ACCOUNT_ID}/images/v1?page=1&per_page=1000"
    
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å...")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    req = urllib.request.Request(url)
    req.add_header("Authorization", f"Bearer {API_TOKEN}")
    
    try:
        with urllib.request.urlopen(req) as response:
            data = json.loads(response.read().decode())
            
            if data.get("success"):
                images = data["result"]["images"]
                print(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return images
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('errors', [])}")
                return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return []

def create_image_mapping(images):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ Image ID"""
    mapping = {}
    print(f"\nüîó –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    for img in images:
        filename = img["filename"]
        image_id = img["id"]
        mapping[filename] = image_id
        print(f"  {filename} -> {image_id}")
    
    return mapping

def update_questions_json(mapping):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç JSON —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    try:
        print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞...")
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open("assets/data/questions.json", "r", encoding="utf-8") as f:
            questions = json.load(f)
        
        updated_count = 0
        not_found_count = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for question in questions:
            if "image" in question and question["image"]:
                old_image = question["image"]
                if old_image in mapping:
                    question["image"] = mapping[old_image]
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {old_image} -> {mapping[old_image]}")
                else:
                    not_found_count += 1
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Image ID –¥–ª—è: {old_image}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open("assets/data/questions_updated.json", "w", encoding="utf-8") as f:
            json.dump(questions, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: assets/data/questions_updated.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON: {e}")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cloudflare Images")
    print("=" * 50)
    
    images = get_all_cloudflare_images()
    
    if not images:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print(f"\nüì∏ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    mapping = create_image_mapping(images)
    
    update_questions_json(mapping)
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω–∏—Ç–µ questions.json –Ω–∞ questions_updated.json")

if __name__ == "__main__":
    main()
